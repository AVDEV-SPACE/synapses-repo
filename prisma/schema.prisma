    // This is your Prisma schema file,
    // learn more about it in the docs: https://pris.ly/d/prisma-schema

    generator client {
        provider = "prisma-client-js"
    }

    datasource db {
        provider = "postgresql"
        url      = env("DATABASE_URL")
    }

    model User {
        id         String   @id @default(cuid())
        firstName  String?
        lastName   String?
        imageUrl   String?
        emailAddress String @unique
        credits    Int      @default(200)

        projects   Project[]
        createdAt  DateTime @default(now())
        updatedAt  DateTime @updatedAt
        Question   Question[]

        userToProjects UserToProject[]
    }

    model Project {
        id   String @id @default(cuid())
        name String

        users User[]

        githubUrl     String?
        documentation String?    @db.Text
        meetings      Meeting[]
        questions     Question[]
        mermaidGraph  String?
        commits       Commit[]

        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
        deletedAt   DateTime? 

        userToProjects UserToProject[]
    }

    model UserToProject {
        id        String   @id @default(cuid())
        userId    String
        projectId String


        user      User    @relation(fields: [userId], references: [id])
        project   Project @relation(fields: [projectId], references: [id])

        @@unique([userId, projectId])
    }

    model Question {
        id       String @id @default(cuid())
        question String
        answer   String

        projectId String
        project   Project @relation(fields: [projectId], references: [id])

        user   User   @relation(fields: [userId], references: [id])
        userId String

        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
    }


    model Commit {
        id                 String   @id @default(cuid())
        commitMessage      String
         commitHash        String   
        commitAuthorName   String
        commitAuthorAvatar String
        commitDate         DateTime
        summary            String? @default("")



        projectId String
        project   Project @relation(fields: [projectId], references: [id])

        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
    }

    
    model Meeting {
        id   String @id @default(cuid())
        name String
        url  String

        projectId String
        project   Project @relation(fields: [projectId], references: [id])

        issues Issue[]

        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
    }

    model Issue {
        id       String @id @default(cuid())
        start    String
        end      String
        gist     String
        headline String
        summary  String

        meetingId String
        meeting   Meeting @relation(fields: [meetingId], references: [id])

        createdAt DateTime @default(now())
        updatedAt DateTime @updatedAt
    }

    model Post {
    id        Int      @id @default(autoincrement())
    title     String
    content   String?
    createdAt DateTime @default(now())
    }

